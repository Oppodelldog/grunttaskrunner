/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.wogatzky.grunttaskrunner;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import org.netbeans.api.project.FileOwnerQuery;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.netbeans.api.project.Project;
import org.openide.filesystems.FileObject;
import org.openide.loaders.DataObject;
import org.openide.util.Exceptions;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.Utilities;
import org.openide.windows.IOProvider;
import org.openide.windows.InputOutput;
import org.openide.windows.OutputWriter;
import org.openide.windows.TopComponent;


/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.wogatzky.gruntconsole//wnd//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "wndTopComponent",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS,
        iconBase = "com/wogatzky/grunttaskrunner/grunt.png"
)
@TopComponent.Registration(mode = "navigator", openAtStartup = false)
@ActionID(category = "Window", id = "com.wogatzky.gruntconsole.wndTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_wndAction",
        preferredID = "wndTopComponent"
)
@Messages({
    "CTL_wndAction=Grunt Taskrunner",
    "CTL_wndTopComponent=Grunt Taskrunner",
    "HINT_wndTopComponent=This is a Grunt Taskrunner window"
})
public final class wndTopComponent extends TopComponent {

    private FileObject GruntDir = null;
    private final String toolName = "Grunt Taskrunner";
    
    public wndTopComponent() {
        initComponents();
        setName(Bundle.CTL_wndTopComponent());
        setToolTipText(Bundle.HINT_wndTopComponent());
        setIcon(ImageUtilities.loadImage("grunt.png", false));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelToolbar = new javax.swing.JPanel();
        btnRun = new javax.swing.JButton();
        panelLIst = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taskList = new javax.swing.JList();

        org.openide.awt.Mnemonics.setLocalizedText(btnRun, org.openide.util.NbBundle.getMessage(wndTopComponent.class, "wndTopComponent.btnRun.text")); // NOI18N
        btnRun.setEnabled(false);
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });
        panelToolbar.add(btnRun);

        panelLIst.setLayout(new javax.swing.BoxLayout(panelLIst, javax.swing.BoxLayout.LINE_AXIS));

        taskList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                taskListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(taskList);

        panelLIst.add(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelLIst, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .addComponent(panelToolbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelToolbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelLIst, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * called when user selected a list item
     * @param evt 
     */
    private void taskListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_taskListValueChanged
        if (!evt.getValueIsAdjusting()) {
            String newValue = taskList.getSelectedValue().toString();

            if (newValue == null) {
                btnRun.setEnabled(false);
            } else {
                btnRun.setEnabled(true);
            }
        }
    }//GEN-LAST:event_taskListValueChanged

    /**
     * called when the iser clicks the "run task" button.
     * will run the selected task using grunt-cli
     * @param evt 
     */
    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed
        try {
            String taskName = taskList.getSelectedValue().toString();
            logMessage("Run " + taskName);
            
            File f = new File(GruntDir.getPath());
            String userDir = System.getProperty("user.home");
            String cmd = userDir + "\\AppData\\Roaming\\npm\\grunt.cmd " + taskName;
            
            Process p = Runtime.getRuntime().exec(cmd,null,f);
            p.waitFor();
            BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));

            String line;
            while ((line = reader.readLine()) != null) {
                logMessage(line);
            }

        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
            logMessage(ex.getMessage());
        } catch (InterruptedException ex) {
            logMessage(ex.getMessage());
        }
    }//GEN-LAST:event_btnRunActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRun;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelLIst;
    private javax.swing.JPanel panelToolbar;
    private javax.swing.JList taskList;
    // End of variables declaration//GEN-END:variables
    
    
    
    /**
     * registers action listener that will react if a gruntfile was selected.
     * the gruntfile is parsed for registerTask calls and the tasknames are extracted
     * and added to the list
     */
    @Override
    public void componentOpened() {
        logMessage("Select your Gruntfile.js in project window");
        
        // TODO add custom code on component opening
        final Lookup.Result<DataObject> dtoResult = Utilities.actionsGlobalContext().lookupResult(DataObject.class);
        dtoResult.addLookupListener(new LookupListener() {

            @Override
            public void resultChanged(LookupEvent ev) {
                try {
                    for (DataObject dto : dtoResult.allInstances()) {
                        Project project = FileOwnerQuery.getOwner(dto.getPrimaryFile());
                        if (project != null) {
                            GruntDir = dto.getPrimaryFile().getParent();
                            if (dto.getPrimaryFile().getName().toLowerCase().equals("gruntfile")) {
                                Pattern p = Pattern.compile("grunt\\.registerTask\\(\\'(?<taskname>[a-zA-Z0-9_\\- ]*)\\'");
                                Matcher m = p.matcher(dto.getPrimaryFile().asText());

                                DefaultListModel listModel = new DefaultListModel();
                                while (m.find()) {
                                    listModel.addElement(m.group("taskname"));
                                }
                                taskList.setModel(listModel);
                            }
                        }
                    }
                } catch (Exception e) {

                }
            }
        });
    }
    
    /**
     * logs the given string in the grunt taskrunner console
     * @param msg 
     */
    private void logMessage(String msg) {
        InputOutput io = IOProvider.getDefault().getIO(this.toolName, false);
        OutputWriter outputWriter;
        io.select();
        outputWriter = io.getOut();
        outputWriter.println(msg);
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
